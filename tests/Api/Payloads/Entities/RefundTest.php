<?php
namespace Piggly\Tests\Pix\Api\Entities;

use DateTime;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\Attributes\Test;
use PHPUnit\Framework\TestCase;
use Piggly\Pix\Api\Payloads\Entities\Refund;
use Piggly\Pix\Exceptions\InvalidFieldException;

#[CoversClass(Refund::class)]
class RefundTest extends TestCase
{
	/**
	 * Assert if $payload is equals to $obj exported.
	 *
	 * Anytime it runs will create 100 random unique
	 * payloads. It must assert all anytime.
	 *
	 * @covers ::import
	 * @covers ::export
	 * @param array $payload
	 * @param Refund $obj
	 * @return void
	 */
	#[Test, DataProvider('dataRefunds')]
	public function isMatching ( array $payload, Refund $obj )
	{ $this->assertEquals($payload, $obj->export()); }

	/**
	 * Assert if $actual is equals to $expected.
	 *
	 * Anytime it runs will create 100 random unique
	 * payloads. It must assert all anytime.
	 *
	 * @covers ::setAmount
	 * @covers ::setRequestedAt
	 * @covers ::setPaidAt
	 * @covers ::getAmount
	 * @covers ::getRequestedAt
	 * @covers ::getPaidAt
	 * @param mixed $expected
	 * @param mixed $actual
	 * @return void
	 */
	#[Test, DataProvider('dataFormats')]
	public function isMatchingFormat ( $expected, $actual )
	{ $this->assertEquals($expected, $actual); }

	/**
	 * Assert if throw an exception.
	 *
	 * @covers ::__construct
	 * @return void
	 */
	#[Test]
	public function throwStatusException ()
	{
		$this->expectException(InvalidFieldException::class);
		(new Refund('1', '2', Refund::STATUS_PROCESSING, 10))->setStatus('unknown');
	}

	/**
	 * A bunch of refunds to import to Refund payload.
	 * Provider to isMatching() method.
	 * Generated by fakerphp.
	 * @return array
	 */
	public static function dataRefunds () : array
	{
		$arr = [];
		$faker = \Faker\Factory::create('pt_BR');

		for ( $i = 0; $i < 100; $i++ )
		{
			$payload = [
				'id' => $faker->regexify('[0-9A-Za-z]{25}'),
				'rtrId' => $faker->regexify('[0-9A-Za-z]{25}'),
				'valor' => \number_format($faker->randomFloat(2, 1, 999), 2, '.', ''),
				'status' => $faker->randomElement(Refund::STATUSES)
			];

			if ( $faker->boolean() )
			{ $payload['motivo'] = $faker->sentence(3); }

			if ( $faker->boolean() )
			{
				$payload['horario'] = [];

				if ( $faker->boolean() )
				{ $payload['horario']['solicitacao'] = $faker->dateTimeBetween('-1 week', '+1 week')->format(DateTime::RFC3339); }

				if ( $faker->boolean() )
				{ $payload['horario']['liquidacao'] = $faker->dateTimeBetween('-1 week', '+1 week')->format(DateTime::RFC3339); }

				if ( empty($payload['horario']) )
				{ unset($payload['horario']); }
			}

			$arr[] = [ $payload, (new Refund($payload['id'], $payload['rtrId'], $payload['status'], $payload['valor']))->import($payload) ];
		}

		return $arr;
	}

	/**
	 * A bunch of refunds to validate data.
	 * Provider to isMatchingFormat() method.
	 * Generated by fakerphp.
	 * @return array
	 */
	public static function dataFormats () : array
	{
		$arr = [];
		$faker = \Faker\Factory::create('pt_BR');

		for ( $i = 0; $i < 100; $i++ )
		{
			$amount = $faker->randomFloat(2, 1, 999);
			$requestAt = $faker->dateTimeBetween('-1 week', '+1 week');
			$paidAt = $faker->dateTimeBetween('-1 week', '+1 week');

			$refund = new Refund(
				$faker->regexify('[0-9A-Za-z]{25}'),
				$faker->regexify('[0-9A-Za-z]{25}'),
				$faker->randomElement(Refund::STATUSES),
				$amount
			);

			$refund
				->setAmount(\number_format($amount, 2, '.', ''))
				->setRequestedAt($requestAt->format(DateTime::RFC3339))
				->setPaidAt($paidAt->format(DateTime::RFC3339));

			$arr[] = [ $amount, $refund->getAmount() ];
			$arr[] = [ $requestAt, $refund->getRequestedAt() ];
			$arr[] = [ $paidAt, $refund->getPaidAt() ];
		}

		return $arr;
	}
}